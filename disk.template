// templated disk functions go here

#include "disk.h"
#include "globals.h"
#include <assert.h>

template<typename T>
void Disk::read(unsigned int baseAddress, T* buffer, size_t dataSize)
{
	assert(dataSize <= sizeof(buffer));

	// data to be written to buffer. using the largest data type
	unsigned long long result = data[baseAddress]; // get first byte
	
	// add on the following bytes to the result
	for (unsigned int i = 1; i < dataSize; i++)
	{
		result = (result << 8) + data[baseAddress + i]; // shift over one byte and concatenate
	}
	
	// write result to buffer
	*buffer = result;
}

template<typename T>
void Disk::write(unsigned int baseAddress, T* buffer, size_t dataSize)
{
	assert(dataSize >= sizeof(buffer));
	
	// for each byte in the buffer
	for (unsigned int i = 0; i < dataSize; i++)
	{
		// write each byte down the memory block in decending order
		data[baseAddress + i] = *buffer >> (8 * (dataSize - 1)) - 8 * i;
	}
}	